name: Deploy  # Name of the workflow

on:  # Event that triggers the workflow
  push: 
    branches:
      - master
      
env:  #Environment variables for the workflow to use in the jobs 
  AWS_REGION: "ap-south-1"
  AWS_EC2: "daytwo"
  ECR_REPO: "devops-bootcamp"
  GIT_SHA: "${{ github.sha }}"  #Global variable for GitHub to get commit ID
  AWS_ACCOUNT_ID: "767398153139"

jobs:  #Jobs to run in the workflow
  build:  #First job name 
    runs-on: ubuntu-latest  # Running on a VM or container

    steps: #Steps to run in the job
      - name: Checkout code  #First step
        uses: actions/checkout@v2

      - name: Configure AWS credentials  #Second step
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"  #Access key ID from GitHub secrets:Declared in GitHub secrets/repository settings 
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}" #Secret access key from GitHub secrets:Declared in GitHub secrets/repository settings
          aws-region: "${{ env.AWS_REGION }}" #Region to deploy the resources/Provided in Environment variables 

      - name: Login to Amazon ECR  #Step 3 
        run: |
          aws ecr get-login-password --region "${{ env.AWS_REGION }}" | \
          docker login --username AWS --password-stdin "${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"

      - name: Build and push Docker image  #Step 4    
        run: |
          docker build -t "${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ env.GIT_SHA }}" ./day1
          docker push "${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ env.GIT_SHA }}"

  deploy:  #Second job name   
    runs-on: ubuntu-latest  # Running on a VM or container  
    needs: build  #Dependency on the first job to run this job fails if the first job fails 

    steps: 
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials #Configure AWS credentials to run the AWS CLI commands
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws-region: "${{ env.AWS_REGION }}"

      - name: Get Public IP and SHA #Get the public IP of the EC2 instance and the commit ID
        run: |
          echo "EC2_PUBLIC_IP=$(aws ec2 describe-instances --filters \"Name=tag:Name,Values=${{ env.AWS_EC2 }}\" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)" >> "$GITHUB_ENV"
          echo "SHA: ${{ env.GIT_SHA }}"

      - name: Execute Remote SSH Commands using SSH Key #execute remote commands on the EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: "${{ env.EC2_PUBLIC_IP }}"
          username: ec2-user
          key: "${{ secrets.SSH_PRIVATE_KEY }}"
          port: 22
          script: |
            echo "Cleaning up the VM"
            docker rm -f $(docker ps -aq) || true
            docker rmi -f $(docker images -q) || true
            
            echo "Logging in to ECR and running the container"
            aws ecr get-login-password --region "${{ env.AWS_REGION }}" | docker login --username AWS --password-stdin "${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
            docker run -td -p 3002:5000 "${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ env.GIT_SHA }}"
