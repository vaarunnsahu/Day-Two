name: Deploy  ## workflow name

on:  ### events
  push:
    branches:
      - master
    paths:
      - day1/**
env:   ###enviornment we are passing inside container 
  AWS_REGION: "us-east-1"
  AWS_EC2: "flask_app"
  ECR_REPO: "flaskrepo"
  GIT_SHA: ${{ github.sha }}  ### This is gloabl variable for github to get commit id numbers
  AWS_ACCOUNT_ID: "816069150653"

jobs:  ### jobs
  build: ### first job name 
    runs-on: ubuntu-latest ## vm or container is running ubuntu

    steps: ### steps
      - name: Checkout code ### first step
        uses: actions/checkout@v2

      - name: Configure AWS credentials ### second step
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  ### This variable we are declared in github secrets
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR ### step3
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build Docker image ### stp4
        run: |
          docker build -t ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ env.GIT_SHA }} ./day1
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ env.GIT_SHA }}
          
  deploy: ### second job name
    runs-on: ubuntu-latest ### This job is running another vm or container
    needs: build ## need key-word we used for its depends up on the first job, incase first job failed it will skip the second job

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Public IP and SHA
        run: |
          # Retrieves the EC2 instance's public IP and sets the SHA
          echo "EC2_PUBLIC_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ env.AWS_EC2 }}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)" >> "$GITHUB_ENV"  
          echo "SHA: $GITHUB_SHA" # Output SHA for debugging and verification

      - name: Execute Remote SSH Commands using SSH Key
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Cleans up existing containers and images
            echo "Cleaning up the VM"
            docker rm -f $(docker ps -aq)
            docker rmi -f $(docker images -q)
            
            # Logs in to ECR and runs the Docker container
            echo "Running container"
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com  
            docker run -td -p 3002:5000 ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ env.GIT_SHA }}
